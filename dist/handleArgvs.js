"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports["default"] = handleArgvs;

function _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }

var type = {
  '-t': 'typeface',
  '-s': 'sentence',
  '-c': 'color',
  '-v': 'verbose',
  '--typeface': 'typeface',
  '--sentence': 'sentence',
  '--color': 'color',
  '--verbose': 'verbose'
};
var handlers = {
  input: function input(argv, matcher, config, index) {
    if (!matcher[argv]) throw new Error('INVALID_INPUT: ' + argv);
    return Object.assign({}, config, _defineProperty({}, matcher[argv], index));
  }
};

function removeNumber(obj) {
  return Object.keys(obj).filter(function (key) {
    return !(typeof obj[key] === 'number');
  }).reduce(function (acc, key) {
    return Object.assign({}, acc, _defineProperty({}, key, obj[key]));
  }, {});
}

function isExpectingInput(config, lastInputIndex) {
  var expectingInput = Object.keys(config).filter(function (key) {
    return config[key] === lastInputIndex;
  });
  return expectingInput.length !== 0 && expectingInput[0];
}

function handleArgvs(argvs) {
  return removeNumber(argvs.reduce(function (config, argv, index) {
    if (argv[0] === '-') return handlers.input(argv, type, config, index); // Expecting Input

    var expectingInput = isExpectingInput(config, index - 1);
    if (expectingInput) return Object.assign({}, config, _defineProperty({}, expectingInput, argv));
    return Object.assign({}, config, {
      sentence: argv
    });
  }, {}));
}
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi4uL3NyYy9oYW5kbGVBcmd2cy5qcyJdLCJuYW1lcyI6WyJ0eXBlIiwiaGFuZGxlcnMiLCJpbnB1dCIsImFyZ3YiLCJtYXRjaGVyIiwiY29uZmlnIiwiaW5kZXgiLCJFcnJvciIsIk9iamVjdCIsImFzc2lnbiIsInJlbW92ZU51bWJlciIsIm9iaiIsImtleXMiLCJmaWx0ZXIiLCJrZXkiLCJyZWR1Y2UiLCJhY2MiLCJpc0V4cGVjdGluZ0lucHV0IiwibGFzdElucHV0SW5kZXgiLCJleHBlY3RpbmdJbnB1dCIsImxlbmd0aCIsImhhbmRsZUFyZ3ZzIiwiYXJndnMiLCJzZW50ZW5jZSJdLCJtYXBwaW5ncyI6Ijs7Ozs7Ozs7O0FBQUEsSUFBTUEsSUFBSSxHQUFHO0FBQ1gsUUFBTSxVQURLO0FBRVgsUUFBTSxVQUZLO0FBR1gsUUFBTSxPQUhLO0FBSVgsUUFBTSxTQUpLO0FBS1gsZ0JBQWMsVUFMSDtBQU1YLGdCQUFjLFVBTkg7QUFPWCxhQUFXLE9BUEE7QUFRWCxlQUFhO0FBUkYsQ0FBYjtBQVdBLElBQU1DLFFBQVEsR0FBRztBQUNmQyxFQUFBQSxLQUFLLEVBQUUsZUFBQ0MsSUFBRCxFQUFPQyxPQUFQLEVBQWdCQyxNQUFoQixFQUF3QkMsS0FBeEIsRUFBa0M7QUFDdkMsUUFBSSxDQUFDRixPQUFPLENBQUNELElBQUQsQ0FBWixFQUFvQixNQUFNLElBQUlJLEtBQUosQ0FBVSxvQkFBb0JKLElBQTlCLENBQU47QUFFcEIsV0FBT0ssTUFBTSxDQUFDQyxNQUFQLENBQWMsRUFBZCxFQUFrQkosTUFBbEIsc0JBQ0pELE9BQU8sQ0FBQ0QsSUFBRCxDQURILEVBQ1lHLEtBRFosRUFBUDtBQUdEO0FBUGMsQ0FBakI7O0FBVUEsU0FBU0ksWUFBVCxDQUFzQkMsR0FBdEIsRUFBMkI7QUFDekIsU0FBT0gsTUFBTSxDQUFDSSxJQUFQLENBQVlELEdBQVosRUFDSkUsTUFESSxDQUNHLFVBQUFDLEdBQUc7QUFBQSxXQUFJLEVBQUUsT0FBT0gsR0FBRyxDQUFDRyxHQUFELENBQVYsS0FBb0IsUUFBdEIsQ0FBSjtBQUFBLEdBRE4sRUFFSkMsTUFGSSxDQUVHLFVBQUNDLEdBQUQsRUFBTUYsR0FBTjtBQUFBLFdBQWNOLE1BQU0sQ0FBQ0MsTUFBUCxDQUFjLEVBQWQsRUFBa0JPLEdBQWxCLHNCQUEwQkYsR0FBMUIsRUFBZ0NILEdBQUcsQ0FBQ0csR0FBRCxDQUFuQyxFQUFkO0FBQUEsR0FGSCxFQUU4RCxFQUY5RCxDQUFQO0FBR0Q7O0FBRUQsU0FBU0csZ0JBQVQsQ0FBMEJaLE1BQTFCLEVBQWtDYSxjQUFsQyxFQUFrRDtBQUNoRCxNQUFJQyxjQUFjLEdBQUdYLE1BQU0sQ0FBQ0ksSUFBUCxDQUFZUCxNQUFaLEVBQ2xCUSxNQURrQixDQUNYLFVBQVVDLEdBQVYsRUFBZTtBQUNyQixXQUFPVCxNQUFNLENBQUNTLEdBQUQsQ0FBTixLQUFnQkksY0FBdkI7QUFDRCxHQUhrQixDQUFyQjtBQUtBLFNBQU9DLGNBQWMsQ0FBQ0MsTUFBZixLQUEwQixDQUExQixJQUErQkQsY0FBYyxDQUFDLENBQUQsQ0FBcEQ7QUFDRDs7QUFFYyxTQUFTRSxXQUFULENBQXFCQyxLQUFyQixFQUE0QjtBQUN6QyxTQUFPWixZQUFZLENBQUNZLEtBQUssQ0FBQ1AsTUFBTixDQUFhLFVBQUNWLE1BQUQsRUFBU0YsSUFBVCxFQUFlRyxLQUFmLEVBQXlCO0FBQ3hELFFBQUlILElBQUksQ0FBQyxDQUFELENBQUosS0FBWSxHQUFoQixFQUFxQixPQUFPRixRQUFRLENBQUNDLEtBQVQsQ0FBZUMsSUFBZixFQUFxQkgsSUFBckIsRUFBMkJLLE1BQTNCLEVBQW1DQyxLQUFuQyxDQUFQLENBRG1DLENBRXhEOztBQUNBLFFBQU1hLGNBQWMsR0FBR0YsZ0JBQWdCLENBQUNaLE1BQUQsRUFBU0MsS0FBSyxHQUFHLENBQWpCLENBQXZDO0FBQ0EsUUFBSWEsY0FBSixFQUFvQixPQUFPWCxNQUFNLENBQUNDLE1BQVAsQ0FBYyxFQUFkLEVBQ3pCSixNQUR5QixzQkFFdEJjLGNBRnNCLEVBRUxoQixJQUZLLEVBQVA7QUFLcEIsV0FBT0ssTUFBTSxDQUFDQyxNQUFQLENBQWMsRUFBZCxFQUFrQkosTUFBbEIsRUFBMEI7QUFDL0JrQixNQUFBQSxRQUFRLEVBQUVwQjtBQURxQixLQUExQixDQUFQO0FBR0QsR0FabUIsRUFZakIsRUFaaUIsQ0FBRCxDQUFuQjtBQWFEIiwic291cmNlc0NvbnRlbnQiOlsiY29uc3QgdHlwZSA9IHtcbiAgJy10JzogJ3R5cGVmYWNlJyxcbiAgJy1zJzogJ3NlbnRlbmNlJyxcbiAgJy1jJzogJ2NvbG9yJyxcbiAgJy12JzogJ3ZlcmJvc2UnLFxuICAnLS10eXBlZmFjZSc6ICd0eXBlZmFjZScsXG4gICctLXNlbnRlbmNlJzogJ3NlbnRlbmNlJyxcbiAgJy0tY29sb3InOiAnY29sb3InLFxuICAnLS12ZXJib3NlJzogJ3ZlcmJvc2UnXG59XG5cbmNvbnN0IGhhbmRsZXJzID0ge1xuICBpbnB1dDogKGFyZ3YsIG1hdGNoZXIsIGNvbmZpZywgaW5kZXgpID0+IHtcbiAgICBpZiAoIW1hdGNoZXJbYXJndl0pIHRocm93IG5ldyBFcnJvcignSU5WQUxJRF9JTlBVVDogJyArIGFyZ3YpXG5cbiAgICByZXR1cm4gT2JqZWN0LmFzc2lnbih7fSwgY29uZmlnLCB7XG4gICAgICBbbWF0Y2hlclthcmd2XV06IGluZGV4XG4gICAgfSlcbiAgfVxufVxuXG5mdW5jdGlvbiByZW1vdmVOdW1iZXIob2JqKSB7XG4gIHJldHVybiBPYmplY3Qua2V5cyhvYmopXG4gICAgLmZpbHRlcihrZXkgPT4gISh0eXBlb2Ygb2JqW2tleV0gPT09ICdudW1iZXInKSlcbiAgICAucmVkdWNlKChhY2MsIGtleSkgPT4gT2JqZWN0LmFzc2lnbih7fSwgYWNjLCB7IFtrZXldOiBvYmpba2V5XSB9KSwge30pXG59XG5cbmZ1bmN0aW9uIGlzRXhwZWN0aW5nSW5wdXQoY29uZmlnLCBsYXN0SW5wdXRJbmRleCkge1xuICB2YXIgZXhwZWN0aW5nSW5wdXQgPSBPYmplY3Qua2V5cyhjb25maWcpXG4gICAgLmZpbHRlcihmdW5jdGlvbiAoa2V5KSB7XG4gICAgICByZXR1cm4gY29uZmlnW2tleV0gPT09IGxhc3RJbnB1dEluZGV4XG4gICAgfSlcblxuICByZXR1cm4gZXhwZWN0aW5nSW5wdXQubGVuZ3RoICE9PSAwICYmIGV4cGVjdGluZ0lucHV0WzBdXG59XG5cbmV4cG9ydCBkZWZhdWx0IGZ1bmN0aW9uIGhhbmRsZUFyZ3ZzKGFyZ3ZzKSB7XG4gIHJldHVybiByZW1vdmVOdW1iZXIoYXJndnMucmVkdWNlKChjb25maWcsIGFyZ3YsIGluZGV4KSA9PiB7XG4gICAgaWYgKGFyZ3ZbMF0gPT09ICctJykgcmV0dXJuIGhhbmRsZXJzLmlucHV0KGFyZ3YsIHR5cGUsIGNvbmZpZywgaW5kZXgpXG4gICAgLy8gRXhwZWN0aW5nIElucHV0XG4gICAgY29uc3QgZXhwZWN0aW5nSW5wdXQgPSBpc0V4cGVjdGluZ0lucHV0KGNvbmZpZywgaW5kZXggLSAxKVxuICAgIGlmIChleHBlY3RpbmdJbnB1dCkgcmV0dXJuIE9iamVjdC5hc3NpZ24oe30sXG4gICAgICBjb25maWcsIHtcbiAgICAgICAgW2V4cGVjdGluZ0lucHV0XTogYXJndlxuICAgICAgfSlcblxuICAgIHJldHVybiBPYmplY3QuYXNzaWduKHt9LCBjb25maWcsIHtcbiAgICAgIHNlbnRlbmNlOiBhcmd2XG4gICAgfSlcbiAgfSwge30pKVxufVxuIl19