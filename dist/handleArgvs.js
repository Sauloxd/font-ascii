"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports["default"] = handleArgvs;

function _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }

var type = {
  '-t': 'typeface',
  '-s': 'sentence',
  '-c': 'color',
  '-v': 'verbose',
  '--typeface': 'typeface',
  '--sentence': 'sentence',
  '--color': 'color',
  '--verbose': 'verbose'
};
var handlers = {
  input: function input(argv, matcher, config, index) {
    if (!matcher[argv]) throw new Error('INVALID_INPUT: ' + argv);
    return Object.assign({}, config, _defineProperty({}, matcher[argv], index));
  }
};

function removeNumber(obj) {
  return Object.keys(obj).filter(function (key) {
    return !(typeof obj[key] === 'number');
  }).reduce(function (acc, key) {
    return Object.assign({}, acc, _defineProperty({}, key, obj[key]));
  }, {});
}

function isExpectingInput(config, lastInputIndex) {
  var expectingInput = Object.keys(config).filter(function (key) {
    return config[key] === lastInputIndex;
  });
  return expectingInput.length !== 0 && expectingInput[0];
}

function handleArgvs(argvs) {
  return removeNumber(argvs.reduce(function (config, argv, index) {
    if (argv[0] === '-') return handlers.input(argv, type, config, index); // Expecting Input

    var expectingInput = isExpectingInput(config, index - 1);
    if (expectingInput) return Object.assign({}, config, _defineProperty({}, expectingInput, argv));
    return Object.assign({}, config, {
      sentence: argv
    });
  }, {}));
}
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi4uL3NyYy9oYW5kbGVBcmd2cy5qcyJdLCJuYW1lcyI6WyJ0eXBlIiwiaGFuZGxlcnMiLCJpbnB1dCIsImFyZ3YiLCJtYXRjaGVyIiwiY29uZmlnIiwiaW5kZXgiLCJFcnJvciIsIk9iamVjdCIsImFzc2lnbiIsInJlbW92ZU51bWJlciIsIm9iaiIsImtleXMiLCJmaWx0ZXIiLCJrZXkiLCJyZWR1Y2UiLCJhY2MiLCJpc0V4cGVjdGluZ0lucHV0IiwibGFzdElucHV0SW5kZXgiLCJleHBlY3RpbmdJbnB1dCIsImxlbmd0aCIsImhhbmRsZUFyZ3ZzIiwiYXJndnMiLCJzZW50ZW5jZSJdLCJtYXBwaW5ncyI6Ijs7Ozs7Ozs7O0FBQUEsSUFBTUEsSUFBSSxHQUFHO0FBQ1gsUUFBTSxVQURLO0FBRVgsUUFBTSxVQUZLO0FBR1gsUUFBTSxPQUhLO0FBSVgsUUFBTSxTQUpLO0FBS1gsZ0JBQWMsVUFMSDtBQU1YLGdCQUFjLFVBTkg7QUFPWCxhQUFXLE9BUEE7QUFRWCxlQUFhO0FBUkYsQ0FBYjtBQVdBLElBQU1DLFFBQVEsR0FBRztBQUNmQyxFQUFBQSxLQUFLLEVBQUUsZUFBQ0MsSUFBRCxFQUFPQyxPQUFQLEVBQWdCQyxNQUFoQixFQUF3QkMsS0FBeEIsRUFBa0M7QUFDdkMsUUFBSSxDQUFDRixPQUFPLENBQUNELElBQUQsQ0FBWixFQUFvQixNQUFNLElBQUlJLEtBQUosQ0FBVSxvQkFBb0JKLElBQTlCLENBQU47QUFFcEIsV0FBT0ssTUFBTSxDQUFDQyxNQUFQLENBQWMsRUFBZCxFQUFrQkosTUFBbEIsc0JBQ0pELE9BQU8sQ0FBQ0QsSUFBRCxDQURILEVBQ1lHLEtBRFosRUFBUDtBQUdEO0FBUGMsQ0FBakI7O0FBVUEsU0FBU0ksWUFBVCxDQUFzQkMsR0FBdEIsRUFBMkI7QUFDekIsU0FBT0gsTUFBTSxDQUFDSSxJQUFQLENBQVlELEdBQVosRUFDSkUsTUFESSxDQUNHLFVBQUFDLEdBQUc7QUFBQSxXQUFJLEVBQUUsT0FBT0gsR0FBRyxDQUFDRyxHQUFELENBQVYsS0FBb0IsUUFBdEIsQ0FBSjtBQUFBLEdBRE4sRUFFSkMsTUFGSSxDQUVHLFVBQUNDLEdBQUQsRUFBTUYsR0FBTjtBQUFBLFdBQWNOLE1BQU0sQ0FBQ0MsTUFBUCxDQUFjLEVBQWQsRUFBa0JPLEdBQWxCLHNCQUEwQkYsR0FBMUIsRUFBZ0NILEdBQUcsQ0FBQ0csR0FBRCxDQUFuQyxFQUFkO0FBQUEsR0FGSCxFQUU4RCxFQUY5RCxDQUFQO0FBR0Q7O0FBRUQsU0FBU0csZ0JBQVQsQ0FBMEJaLE1BQTFCLEVBQWtDYSxjQUFsQyxFQUFrRDtBQUNoRCxNQUFJQyxjQUFjLEdBQUdYLE1BQU0sQ0FBQ0ksSUFBUCxDQUFZUCxNQUFaLEVBQW9CUSxNQUFwQixDQUEyQixVQUFTQyxHQUFULEVBQWM7QUFDNUQsV0FBT1QsTUFBTSxDQUFDUyxHQUFELENBQU4sS0FBZ0JJLGNBQXZCO0FBQ0QsR0FGb0IsQ0FBckI7QUFJQSxTQUFPQyxjQUFjLENBQUNDLE1BQWYsS0FBMEIsQ0FBMUIsSUFBK0JELGNBQWMsQ0FBQyxDQUFELENBQXBEO0FBQ0Q7O0FBRWMsU0FBU0UsV0FBVCxDQUFxQkMsS0FBckIsRUFBNEI7QUFDekMsU0FBT1osWUFBWSxDQUNqQlksS0FBSyxDQUFDUCxNQUFOLENBQWEsVUFBQ1YsTUFBRCxFQUFTRixJQUFULEVBQWVHLEtBQWYsRUFBeUI7QUFDcEMsUUFBSUgsSUFBSSxDQUFDLENBQUQsQ0FBSixLQUFZLEdBQWhCLEVBQXFCLE9BQU9GLFFBQVEsQ0FBQ0MsS0FBVCxDQUFlQyxJQUFmLEVBQXFCSCxJQUFyQixFQUEyQkssTUFBM0IsRUFBbUNDLEtBQW5DLENBQVAsQ0FEZSxDQUVwQzs7QUFDQSxRQUFNYSxjQUFjLEdBQUdGLGdCQUFnQixDQUFDWixNQUFELEVBQVNDLEtBQUssR0FBRyxDQUFqQixDQUF2QztBQUNBLFFBQUlhLGNBQUosRUFDRSxPQUFPWCxNQUFNLENBQUNDLE1BQVAsQ0FBYyxFQUFkLEVBQWtCSixNQUFsQixzQkFDSmMsY0FESSxFQUNhaEIsSUFEYixFQUFQO0FBSUYsV0FBT0ssTUFBTSxDQUFDQyxNQUFQLENBQWMsRUFBZCxFQUFrQkosTUFBbEIsRUFBMEI7QUFDL0JrQixNQUFBQSxRQUFRLEVBQUVwQjtBQURxQixLQUExQixDQUFQO0FBR0QsR0FaRCxFQVlHLEVBWkgsQ0FEaUIsQ0FBbkI7QUFlRCIsInNvdXJjZXNDb250ZW50IjpbImNvbnN0IHR5cGUgPSB7XG4gICctdCc6ICd0eXBlZmFjZScsXG4gICctcyc6ICdzZW50ZW5jZScsXG4gICctYyc6ICdjb2xvcicsXG4gICctdic6ICd2ZXJib3NlJyxcbiAgJy0tdHlwZWZhY2UnOiAndHlwZWZhY2UnLFxuICAnLS1zZW50ZW5jZSc6ICdzZW50ZW5jZScsXG4gICctLWNvbG9yJzogJ2NvbG9yJyxcbiAgJy0tdmVyYm9zZSc6ICd2ZXJib3NlJyxcbn07XG5cbmNvbnN0IGhhbmRsZXJzID0ge1xuICBpbnB1dDogKGFyZ3YsIG1hdGNoZXIsIGNvbmZpZywgaW5kZXgpID0+IHtcbiAgICBpZiAoIW1hdGNoZXJbYXJndl0pIHRocm93IG5ldyBFcnJvcignSU5WQUxJRF9JTlBVVDogJyArIGFyZ3YpO1xuXG4gICAgcmV0dXJuIE9iamVjdC5hc3NpZ24oe30sIGNvbmZpZywge1xuICAgICAgW21hdGNoZXJbYXJndl1dOiBpbmRleCxcbiAgICB9KTtcbiAgfSxcbn07XG5cbmZ1bmN0aW9uIHJlbW92ZU51bWJlcihvYmopIHtcbiAgcmV0dXJuIE9iamVjdC5rZXlzKG9iailcbiAgICAuZmlsdGVyKGtleSA9PiAhKHR5cGVvZiBvYmpba2V5XSA9PT0gJ251bWJlcicpKVxuICAgIC5yZWR1Y2UoKGFjYywga2V5KSA9PiBPYmplY3QuYXNzaWduKHt9LCBhY2MsIHsgW2tleV06IG9ialtrZXldIH0pLCB7fSk7XG59XG5cbmZ1bmN0aW9uIGlzRXhwZWN0aW5nSW5wdXQoY29uZmlnLCBsYXN0SW5wdXRJbmRleCkge1xuICB2YXIgZXhwZWN0aW5nSW5wdXQgPSBPYmplY3Qua2V5cyhjb25maWcpLmZpbHRlcihmdW5jdGlvbihrZXkpIHtcbiAgICByZXR1cm4gY29uZmlnW2tleV0gPT09IGxhc3RJbnB1dEluZGV4O1xuICB9KTtcblxuICByZXR1cm4gZXhwZWN0aW5nSW5wdXQubGVuZ3RoICE9PSAwICYmIGV4cGVjdGluZ0lucHV0WzBdO1xufVxuXG5leHBvcnQgZGVmYXVsdCBmdW5jdGlvbiBoYW5kbGVBcmd2cyhhcmd2cykge1xuICByZXR1cm4gcmVtb3ZlTnVtYmVyKFxuICAgIGFyZ3ZzLnJlZHVjZSgoY29uZmlnLCBhcmd2LCBpbmRleCkgPT4ge1xuICAgICAgaWYgKGFyZ3ZbMF0gPT09ICctJykgcmV0dXJuIGhhbmRsZXJzLmlucHV0KGFyZ3YsIHR5cGUsIGNvbmZpZywgaW5kZXgpO1xuICAgICAgLy8gRXhwZWN0aW5nIElucHV0XG4gICAgICBjb25zdCBleHBlY3RpbmdJbnB1dCA9IGlzRXhwZWN0aW5nSW5wdXQoY29uZmlnLCBpbmRleCAtIDEpO1xuICAgICAgaWYgKGV4cGVjdGluZ0lucHV0KVxuICAgICAgICByZXR1cm4gT2JqZWN0LmFzc2lnbih7fSwgY29uZmlnLCB7XG4gICAgICAgICAgW2V4cGVjdGluZ0lucHV0XTogYXJndixcbiAgICAgICAgfSk7XG5cbiAgICAgIHJldHVybiBPYmplY3QuYXNzaWduKHt9LCBjb25maWcsIHtcbiAgICAgICAgc2VudGVuY2U6IGFyZ3YsXG4gICAgICB9KTtcbiAgICB9LCB7fSksXG4gICk7XG59XG4iXX0=