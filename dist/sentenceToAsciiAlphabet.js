"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.dimensions = dimensions;
exports["default"] = _default;

var _Box = _interopRequireDefault(require("./types/Box"));

var _ramda = _interopRequireDefault(require("ramda"));

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { "default": obj }; }

function _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }

var specialChars = {
  EMPTY: ' '
};

var handlers = _defineProperty({}, specialChars.EMPTY, function (_ref) {
  var height = _ref.height,
      width = _ref.width;
  return Array(height).fill(0).map(fillEmpty.bind(null, width)).join('\n');
});

function fillEmpty(width) {
  return Array(width).fill(0).map(function (_) {
    return ' ';
  }).join('');
}

function handleAlphabetChar(alphabet, _char) {
  return handlers[_char] && handlers[_char](dimensions(alphabet)) || alphabet[_char.toUpperCase()];
}

function dimensions(letters, dimension) {
  var letter = letters instanceof Array ? (letters || [])[0] : letters.A;
  var proportion = {
    height: letter.split('\n').length,
    width: letter.split('\n')[0].split('').length
  };
  return dimension && proportion[dimension] || proportion;
}

function _default(sentence, alphabet) {
  return (0, _Box["default"])(sentence).map(_ramda["default"].split('')).map(_ramda["default"].map(function (_char2) {
    return handleAlphabetChar(alphabet, _char2);
  }));
}
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi4uL3NyYy9zZW50ZW5jZVRvQXNjaWlBbHBoYWJldC5qcyJdLCJuYW1lcyI6WyJzcGVjaWFsQ2hhcnMiLCJFTVBUWSIsImhhbmRsZXJzIiwiaGVpZ2h0Iiwid2lkdGgiLCJBcnJheSIsImZpbGwiLCJtYXAiLCJmaWxsRW1wdHkiLCJiaW5kIiwiam9pbiIsIl8iLCJoYW5kbGVBbHBoYWJldENoYXIiLCJhbHBoYWJldCIsImNoYXIiLCJkaW1lbnNpb25zIiwidG9VcHBlckNhc2UiLCJsZXR0ZXJzIiwiZGltZW5zaW9uIiwibGV0dGVyIiwiQSIsInByb3BvcnRpb24iLCJzcGxpdCIsImxlbmd0aCIsInNlbnRlbmNlIiwiUiJdLCJtYXBwaW5ncyI6Ijs7Ozs7Ozs7QUFBQTs7QUFDQTs7Ozs7O0FBRUEsSUFBTUEsWUFBWSxHQUFHO0FBQ25CQyxFQUFBQSxLQUFLLEVBQUU7QUFEWSxDQUFyQjs7QUFJQSxJQUFNQyxRQUFRLHVCQUNYRixZQUFZLENBQUNDLEtBREYsRUFDVTtBQUFBLE1BQUdFLE1BQUgsUUFBR0EsTUFBSDtBQUFBLE1BQVdDLEtBQVgsUUFBV0EsS0FBWDtBQUFBLFNBQXVCQyxLQUFLLENBQUNGLE1BQUQsQ0FBTCxDQUFjRyxJQUFkLENBQW1CLENBQW5CLEVBQXNCQyxHQUF0QixDQUEwQkMsU0FBUyxDQUFDQyxJQUFWLENBQWUsSUFBZixFQUFxQkwsS0FBckIsQ0FBMUIsRUFBdURNLElBQXZELENBQTRELElBQTVELENBQXZCO0FBQUEsQ0FEVixDQUFkOztBQUlBLFNBQVNGLFNBQVQsQ0FBbUJKLEtBQW5CLEVBQTBCO0FBQ3hCLFNBQU9DLEtBQUssQ0FBQ0QsS0FBRCxDQUFMLENBQWFFLElBQWIsQ0FBa0IsQ0FBbEIsRUFBcUJDLEdBQXJCLENBQXlCLFVBQUFJLENBQUM7QUFBQSxXQUFJLEdBQUo7QUFBQSxHQUExQixFQUFtQ0QsSUFBbkMsQ0FBd0MsRUFBeEMsQ0FBUDtBQUNEOztBQUVELFNBQVNFLGtCQUFULENBQTRCQyxRQUE1QixFQUFzQ0MsS0FBdEMsRUFBNEM7QUFDMUMsU0FBUVosUUFBUSxDQUFDWSxLQUFELENBQVIsSUFBa0JaLFFBQVEsQ0FBQ1ksS0FBRCxDQUFSLENBQWVDLFVBQVUsQ0FBQ0YsUUFBRCxDQUF6QixDQUFuQixJQUNGQSxRQUFRLENBQUNDLEtBQUksQ0FBQ0UsV0FBTCxFQUFELENBRGI7QUFFRDs7QUFFTSxTQUFTRCxVQUFULENBQW9CRSxPQUFwQixFQUE2QkMsU0FBN0IsRUFBd0M7QUFDN0MsTUFBTUMsTUFBTSxHQUFHRixPQUFPLFlBQVlaLEtBQW5CLEdBQTJCLENBQUNZLE9BQU8sSUFBSSxFQUFaLEVBQWdCLENBQWhCLENBQTNCLEdBQWdEQSxPQUFPLENBQUNHLENBQXZFO0FBQ0EsTUFBTUMsVUFBVSxHQUFHO0FBQ2pCbEIsSUFBQUEsTUFBTSxFQUFFZ0IsTUFBTSxDQUFDRyxLQUFQLENBQWEsSUFBYixFQUFtQkMsTUFEVjtBQUVqQm5CLElBQUFBLEtBQUssRUFBRWUsTUFBTSxDQUFDRyxLQUFQLENBQWEsSUFBYixFQUFtQixDQUFuQixFQUFzQkEsS0FBdEIsQ0FBNEIsRUFBNUIsRUFBZ0NDO0FBRnRCLEdBQW5CO0FBS0EsU0FBUUwsU0FBUyxJQUFJRyxVQUFVLENBQUNILFNBQUQsQ0FBeEIsSUFBd0NHLFVBQS9DO0FBQ0Q7O0FBRWMsa0JBQVVHLFFBQVYsRUFBb0JYLFFBQXBCLEVBQThCO0FBQzNDLFNBQU8scUJBQUlXLFFBQUosRUFDSmpCLEdBREksQ0FDQWtCLGtCQUFFSCxLQUFGLENBQVEsRUFBUixDQURBLEVBRUpmLEdBRkksQ0FFQWtCLGtCQUFFbEIsR0FBRixDQUFNLFVBQUFPLE1BQUk7QUFBQSxXQUFJRixrQkFBa0IsQ0FBQ0MsUUFBRCxFQUFXQyxNQUFYLENBQXRCO0FBQUEsR0FBVixDQUZBLENBQVA7QUFHRCIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCBCb3ggZnJvbSAnLi90eXBlcy9Cb3gnXG5pbXBvcnQgUiBmcm9tICdyYW1kYSdcblxuY29uc3Qgc3BlY2lhbENoYXJzID0ge1xuICBFTVBUWTogJyAnXG59XG5cbmNvbnN0IGhhbmRsZXJzID0ge1xuICBbc3BlY2lhbENoYXJzLkVNUFRZXTogKHsgaGVpZ2h0LCB3aWR0aCB9KSA9PiBBcnJheShoZWlnaHQpLmZpbGwoMCkubWFwKGZpbGxFbXB0eS5iaW5kKG51bGwsIHdpZHRoKSkuam9pbignXFxuJylcbn1cblxuZnVuY3Rpb24gZmlsbEVtcHR5KHdpZHRoKSB7XG4gIHJldHVybiBBcnJheSh3aWR0aCkuZmlsbCgwKS5tYXAoXyA9PiAnICcpLmpvaW4oJycpXG59XG5cbmZ1bmN0aW9uIGhhbmRsZUFscGhhYmV0Q2hhcihhbHBoYWJldCwgY2hhcikge1xuICByZXR1cm4gKGhhbmRsZXJzW2NoYXJdICYmIGhhbmRsZXJzW2NoYXJdKGRpbWVuc2lvbnMoYWxwaGFiZXQpKSlcbiAgICB8fCBhbHBoYWJldFtjaGFyLnRvVXBwZXJDYXNlKCldXG59XG5cbmV4cG9ydCBmdW5jdGlvbiBkaW1lbnNpb25zKGxldHRlcnMsIGRpbWVuc2lvbikge1xuICBjb25zdCBsZXR0ZXIgPSBsZXR0ZXJzIGluc3RhbmNlb2YgQXJyYXkgPyAobGV0dGVycyB8fCBbXSlbMF0gOiBsZXR0ZXJzLkFcbiAgY29uc3QgcHJvcG9ydGlvbiA9IHtcbiAgICBoZWlnaHQ6IGxldHRlci5zcGxpdCgnXFxuJykubGVuZ3RoLFxuICAgIHdpZHRoOiBsZXR0ZXIuc3BsaXQoJ1xcbicpWzBdLnNwbGl0KCcnKS5sZW5ndGhcbiAgfVxuXG4gIHJldHVybiAoZGltZW5zaW9uICYmIHByb3BvcnRpb25bZGltZW5zaW9uXSkgfHwgcHJvcG9ydGlvblxufVxuXG5leHBvcnQgZGVmYXVsdCBmdW5jdGlvbiAoc2VudGVuY2UsIGFscGhhYmV0KSB7XG4gIHJldHVybiBCb3goc2VudGVuY2UpXG4gICAgLm1hcChSLnNwbGl0KCcnKSlcbiAgICAubWFwKFIubWFwKGNoYXIgPT4gaGFuZGxlQWxwaGFiZXRDaGFyKGFscGhhYmV0LCBjaGFyKSkpXG59XG5cblxuIl19